# -*- coding: utf-8 -*-
"""resnet50_car_damage_severity.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zqEJ7mDt3voS8vTUJ2BsKo30xidbAKE3
"""

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import keras
import tensorflow as tf
import matplotlib.pyplot as plt
from keras.layers import Conv2D, Dense, Flatten, MaxPool2D
from keras.models import Sequential, load_model
from keras.optimizers import Adam
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import ModelCheckpoint, EarlyStopping
import tensorflow as tf
from tensorflow import keras

from keras.preprocessing.image import ImageDataGenerator
datagen = ImageDataGenerator(
    rescale=1.0 / 255.0,  # Rescale pixel values to [0, 1]
    rotation_range=15,    # Rotate images up to 15 degrees
    width_shift_range=0.1,  # Shift images horizontally up to 10% of width
    height_shift_range=0.1,  # Shift images vertically up to 10% of height
    shear_range=0.1,        # Shear transformations
    zoom_range=0.1,         # Zoom in/out by up to 10% # Fill in new pixels using the nearest neighbor value
    validation_split=0.2,    # Split dataset into training and validation

)

train_generator = datagen.flow_from_directory(
    '/content/drive/MyDrive/Car_Damage_Severity_Dataset/training',
    target_size=(224, 224),
    color_mode='rgb',
    shuffle=True,
    seed=123,
    batch_size=32,
    class_mode='categorical',
    subset='training'
)

validation_generator = datagen.flow_from_directory(
    '/content/drive/MyDrive/Car_Damage_Severity_Dataset/validation',
     target_size=(224, 224),
     shuffle=True,
     seed=123,
     color_mode='rgb',
     class_mode='categorical',
     batch_size=32,
     subset='validation'
)

class_names=list(train_generator.class_indices.keys())
class_names

# Get the dimensions of the images
image_height, image_width, _ = train_generator.image_shape
print(f"Image height: {image_height}")
print(f"Image width: {image_width}")

!pip install --upgrade tensorflow

import sys
from os.path import join
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt

import tensorflow as tf
from tensorflow.keras.applications.resnet50 import preprocess_input
from tensorflow.keras.preprocessing.image import load_img, img_to_array

#from tensorflow.python.keras.applications import ResNet50

from keras import models, regularizers, layers, optimizers, losses, metrics
from keras.models import Sequential
from keras.layers import Dense
from keras.utils import to_categorical
from keras.preprocessing.image import ImageDataGenerator
from keras.preprocessing import image
from keras.applications import ResNet50

import os

conv_base = ResNet50(weights='imagenet',
include_top=False,
input_shape=(224, 224, 3))

print(conv_base.summary())

# Make the conv_base NOT trainable:

for layer in conv_base.layers[:]:
   layer.trainable = False

print('conv_base is now NOT trainable')

model = models.Sequential()
model.add(conv_base)
model.add(layers.Flatten())
model.add(layers.Dropout(0.5))
model.add(layers.Dense(64, activation='relu',kernel_regularizer=regularizers.l2(0.001)))
model.add(layers.Dropout(0.5))
model.add(layers.Dense(3, activation='softmax'))

print(model.summary())

for i, layer in enumerate(conv_base.layers):
   print(i, layer.name, layer.trainable)

from tensorflow.keras.callbacks import ModelCheckpoint

# Define the filepath where you want to save the best model
checkpoint_filepath = '/content/drive/MyDrive/best_model_car_damage_severity.h5'

# Define the ModelCheckpoint callback
checkpoint = ModelCheckpoint(
    checkpoint_filepath,
    save_best_only=True,  # Save only the best model
    monitor='val_accuracy',  # Monitor validation accuracy
    mode='max',  # Mode for monitoring (maximizing validation accuracy)
    verbose=1  # Print messages
)

# Compile the model
model.compile(optimizer=optimizers.Adam(),
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Print model summary
print("Model compiled")
print(model.summary())

history = model.fit(
    train_generator,
    validation_data=validation_generator,
    epochs=100,
    callbacks=[checkpoint],
    verbose=1
)

!pip install --upgrade tensorflow h5py

model.load_weights('/content/drive/MyDrive/best_model_car_damage_severity.h5')

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from tensorflow.keras.preprocessing import image as image_utils
from tensorflow.keras.applications.imagenet_utils import preprocess_input

def show_image(image_path):
    image = mpimg.imread(image_path)
    plt.imshow(image)

def make_predictions(image_path):
    show_image(image_path)
    image = image_utils.load_img(image_path, target_size=(224, 224))
    image = image_utils.img_to_array(image)
    image = image.reshape(1,224,224,3)
    image = preprocess_input(image)
    preds = model.predict(image)

    return preds

class_names[np.argmax(make_predictions("/content/car-accident.jpg"))]

class_names[np.argmax(make_predictions("/content/deb9f9efc56ef2a940bdf0d58ccaad5c_XL.jpg"))]

