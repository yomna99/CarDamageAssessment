import PIL
import streamlit as st
from ultralytics import YOLO
from tensorflow.keras.models import load_model
import numpy as np
import cv2
import matplotlib.pyplot as plt

# Replace the relative path to your YOLO weight file
yolo_model_path = 'C:/Users/yomna/Desktop/deep_computer_vision/yoylov8_segmentation_best/best.pt'

# Replace the relative path to your CNN model file
cnn_model_path = 'C:/Users/yomna/Desktop/deep_computer_vision/best_model.h5'

# Replace the relative path to your Xception model file
xception_model_path = 'C:/Users/yomna/Desktop/deep_computer_vision/best_model_xception_damage_severity.h5'

# Setting page layout
st.set_page_config(
    page_title="Car damage Detection and Classification",  # Setting page title
    page_icon="ðŸ¤–",     # Setting page icon
    layout="wide",      # Setting layout to wide
    initial_sidebar_state="expanded"    # Expanding sidebar by default
)

# Creating sidebar
with st.sidebar:
    st.header("Image  Config")     # Adding header to sidebar
    # Adding file uploader to sidebar for selecting images
    source_img = st.file_uploader(
        "Choose an image...", type=("jpg", "jpeg", "png", 'bmp', 'webp'))

    # Model Options
    confidence = float(st.slider(
        "Select Model Confidence", 25, 100, 40)) / 100

# Creating main page heading
st.title("Object Detection and Image Classification")

# Creating two columns on the main page
col1, col2 = st.columns(2)

# Adding image to the first column if image is uploaded
with col1:
    if source_img:
        # Opening the uploaded image
        uploaded_image = PIL.Image.open(source_img)
        # Adding the uploaded image to the page with a caption
        st.image(source_img,
                 caption="Uploaded Image",
                 use_column_width=True
                 )

# Load the YOLO model
try:
    yolo_model = YOLO(yolo_model_path)
except Exception as ex:
    st.error(
        f"Unable to load YOLO model. Check the specified path: {yolo_model_path}")
    st.error(ex)

# Load the CNN model
try:
    cnn_model = load_model(cnn_model_path)
except Exception as ex:
    st.error(
        f"Unable to load CNN model. Check the specified path: {cnn_model_path}")
    st.error(ex)

# Load the Xception model
try:
    xception_model = load_model(xception_model_path)
except Exception as ex:
    st.error(
        f"Unable to load Xception model. Check the specified path: {xception_model_path}")
    st.error(ex)

if st.sidebar.button('Detect Objects and Classify Image'):
    # YOLO Object Detection
    res = yolo_model.predict(uploaded_image, conf=confidence)
    boxes = res[0].boxes
    res_plotted = res[0].plot()[:, :, ::-1]
    with col2:
        st.image(res_plotted,
                 caption='Detected Image',
                 use_column_width=True
                 )

    # CNN Image Classification
    with st.expander("CNN Image Classification Results"):
        try:
            # Preprocess the image for the CNN model
            img_array = np.array(uploaded_image.resize((224, 224))) / 255.0
            img_array = np.expand_dims(img_array, axis=0)

            # Make the prediction using the CNN model
            cnn_prediction = cnn_model.predict(img_array)

            # Get the predicted class
            predicted_class = int(cnn_prediction[0][0] > 0.5)  # Assuming threshold of 0.5 for binary classification

            # Display the predicted class label
            if predicted_class == 0:
                st.write("Image Classification Prediction: Car generated by AI")
            elif predicted_class == 1:
                st.write("Image Classification Prediction: Real Car")
        except Exception as ex:
            st.error(f"Error during image classification: {ex}")

    # Xception Damage Classification
    with st.expander("Xception Damage Classification Results"):
        try:
            # Preprocess the image for the Xception model
            img_array_xception = np.array(uploaded_image.resize((299, 299))) / 255.0
            img_array_xception = np.expand_dims(img_array_xception, axis=0)

            # Make the prediction using the Xception model
            xception_prediction = xception_model.predict(img_array_xception)

            # Get the predicted class index
            predicted_class_xception = np.argmax(xception_prediction, axis=1)[0]

            # Display the predicted damage class label
            if predicted_class_xception == 0:
                st.write("Xception Damage Classification: Minor Damage")
            elif predicted_class_xception == 1:
                st.write("Xception Damage Classification: Moderate Damage")
            elif predicted_class_xception == 2:
                st.write("Xception Damage Classification: Severe Damage")
        except Exception as ex:
            st.error(f"Error during Xception damage classification: {ex}")
