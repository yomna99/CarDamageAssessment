# -*- coding: utf-8 -*-
"""Xception_car_severity_class.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17kyAHzu_o8noEFdkw9Mup0I5DKnb5XKO
"""

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.applications import Xception
from tensorflow.keras.preprocessing.image import ImageDataGenerator

img_width, img_height = 299, 299  # Xception model's default input size
num_classes = 3

from tensorflow.keras.preprocessing.image import ImageDataGenerator
import cv2


# Create an image generator with augmentation operations
train_datagen = ImageDataGenerator(
    rescale=1./255,
    shear_range=0.3,
    horizontal_flip=True,
    vertical_flip=False,
    zoom_range=0.3,
    rotation_range=30,  # Rotation range
)

# Generator for training data
train_generator = train_datagen.flow_from_directory(
    "/content/drive/MyDrive/Car_Damage_Severity_Dataset/training",
    target_size=(299, 299),
    batch_size=32,
    color_mode="rgb",
    class_mode='categorical',  # Change to 'binary' for binary classification
)

validation_datagen = ImageDataGenerator(rescale=1./255)
validation_generator = validation_datagen.flow_from_directory(
    "/content/drive/MyDrive/Car_Damage_Severity_Dataset/validation",
    target_size=(299, 299),
    batch_size=32,
    color_mode="rgb",
    class_mode='categorical',  # Change to 'binary' for binary classification
)

# Load the pre-trained Xception model
base_model = Xception(weights='imagenet', include_top=False, input_shape=(img_width, img_height, 3))

# Freeze the layers of the pre-trained model
for layer in base_model.layers:
    layer.trainable = False

# Add your custom classification head
x = layers.GlobalAveragePooling2D()(base_model.output)
x = layers.Dense(256, activation='relu')(x)
x = layers.Dropout(0.5)(x)
output_layer = layers.Dense(num_classes, activation='softmax')(x)

# Create the fine-tuned model
model = models.Model(inputs=base_model.input, outputs=output_layer)

model.summary()

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

from tensorflow.keras.callbacks import ModelCheckpoint
import math

# Define the ModelCheckpoint callback
checkpoint_path = '/content/drive/MyDrive' + '/best_model_xception_damage_severity.h5'
checkpoint = ModelCheckpoint(checkpoint_path, monitor='val_accuracy', save_best_only=True, mode='max', verbose=1)

# Calculate steps_per_epoch
steps_per_epoch = math.ceil(len(train_generator) / train_generator.batch_size)

# Calculate validation_steps
validation_steps = math.ceil(len(validation_generator) / validation_generator.batch_size)

# Use the callback when calling fit_generator
hist = model.fit_generator(
    generator=train_generator,
    steps_per_epoch=steps_per_epoch,
    epochs=70,
    validation_data=validation_generator,
    validation_steps=validation_steps,
    callbacks=[checkpoint]
)

import matplotlib.pyplot as plt

plt.plot(hist.history["loss"], label = "Train Loss")
plt.plot(hist.history["val_loss"], label = "Validation Loss")
plt.legend()
plt.show()

plt.plot(hist.history["accuracy"], label = "Train Accuracy")
plt.plot(hist.history["val_accuracy"], label = "Validation Accuracy")
plt.legend()
plt.show()

model.load_weights('/content/drive/MyDrive/best_model_xception_damage_severity.h5')

class_names=list(train_generator.class_indices.keys())
class_names

import tensorflow as tf
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.inception_v3 import preprocess_input
import numpy as np
import matplotlib.pyplot as plt

# Load your trained model
model = tf.keras.models.load_model('/content/drive/MyDrive/best_model_xception_damage_severity.h5')

# Load and preprocess the image
img_path = '/content/téléchargement (2).jpg'  # Replace with the path to your image
img = image.load_img(img_path, target_size=(299, 299))  # Adjust target_size based on your model's input size
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0)
img_array = preprocess_input(img_array)

# Make predictions
predictions = model.predict(img_array)

# Get the predicted class label
predicted_class = np.argmax(predictions, axis=1)[0]
print(f"Predicted Class Index: {predicted_class}")

# Display the image
plt.imshow(img)
plt.axis('off')

# Display the predicted class message
if predicted_class == 0:
    plt.title("Predicted Class: Minor Damage")
elif predicted_class == 1:
    plt.title("Predicted Class: Moderate Damage")
elif predicted_class == 2:
    plt.title("Predicted Class: Severe Damage")

plt.show()

import tensorflow as tf
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.inception_v3 import preprocess_input
import numpy as np
import matplotlib.pyplot as plt

# Load your trained model
model = tf.keras.models.load_model('/content/drive/MyDrive/best_model_xception_damage_severity.h5')

# Load and preprocess the image
img_path = '/content/téléchargement (3).jpg'  # Replace with the path to your image
img = image.load_img(img_path, target_size=(299, 299))  # Adjust target_size based on your model's input size
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0)
img_array = preprocess_input(img_array)

# Make predictions
predictions = model.predict(img_array)

# Get the predicted class label
predicted_class = np.argmax(predictions, axis=1)[0]
print(f"Predicted Class Index: {predicted_class}")

# Display the image
plt.imshow(img)
plt.axis('off')

# Display the predicted class message
if predicted_class == 0:
    plt.title("Predicted Class: Minor Damage")
elif predicted_class == 1:
    plt.title("Predicted Class: Moderate Damage")
elif predicted_class == 2:
    plt.title("Predicted Class: Severe Damage")

plt.show()

import tensorflow as tf
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.inception_v3 import preprocess_input
import numpy as np
import matplotlib.pyplot as plt

# Load your trained model
model = tf.keras.models.load_model('/content/drive/MyDrive/best_model_xception_damage_severity.h5')

# Load and preprocess the image
img_path = '/content/carcare_1013111_600.jpg'  # Replace with the path to your image
img = image.load_img(img_path, target_size=(299, 299))  # Adjust target_size based on your model's input size
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0)
img_array = preprocess_input(img_array)

# Make predictions
predictions = model.predict(img_array)

# Get the predicted class label
predicted_class = np.argmax(predictions, axis=1)[0]
print(f"Predicted Class Index: {predicted_class}")

# Display the image
plt.imshow(img)
plt.axis('off')

# Display the predicted class message
if predicted_class == 0:
    plt.title("Predicted Class: Minor Damage")
elif predicted_class == 1:
    plt.title("Predicted Class: Moderate Damage")
elif predicted_class == 2:
    plt.title("Predicted Class: Severe Damage")

plt.show()

import tensorflow as tf
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.inception_v3 import preprocess_input
import numpy as np
import matplotlib.pyplot as plt

# Load your trained model
model = tf.keras.models.load_model('/content/drive/MyDrive/best_model_xception_damage_severity.h5')

# Load and preprocess the image
img_path = '/content/98439718-damaged-car-front-after-traffic-accident.jpg'  # Replace with the path to your image
img = image.load_img(img_path, target_size=(299, 299))  # Adjust target_size based on your model's input size
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0)
img_array = preprocess_input(img_array)

# Make predictions
predictions = model.predict(img_array)

# Get the predicted class label
predicted_class = np.argmax(predictions, axis=1)[0]
print(f"Predicted Class Index: {predicted_class}")

# Display the image
plt.imshow(img)
plt.axis('off')

# Display the predicted class message
if predicted_class == 0:
    plt.title("Predicted Class: Minor Damage")
elif predicted_class == 1:
    plt.title("Predicted Class: Moderate Damage")
elif predicted_class == 2:
    plt.title("Predicted Class: Severe Damage")

plt.show()

import tensorflow as tf
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.inception_v3 import preprocess_input
import numpy as np
import matplotlib.pyplot as plt

# Load your trained model
model = tf.keras.models.load_model('/content/drive/MyDrive/best_model_xception_damage_severity.h5')

# Load and preprocess the image
img_path = '/content/téléchargement (2).jpg'  # Replace with the path to your image
img = image.load_img(img_path, target_size=(299, 299))  # Adjust target_size based on your model's input size
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0)
img_array = preprocess_input(img_array)

# Make predictions
predictions = model.predict(img_array)

# Get the predicted class label
predicted_class = np.argmax(predictions, axis=1)[0]
print(f"Predicted Class Index: {predicted_class}")

# Display the image
plt.imshow(img)
plt.axis('off')

# Display the predicted class message
if predicted_class == 0:
    plt.title("Predicted Class: Minor Damage")
elif predicted_class == 1:
    plt.title("Predicted Class: Moderate Damage")
elif predicted_class == 2:
    plt.title("Predicted Class: Severe Damage")

plt.show()

